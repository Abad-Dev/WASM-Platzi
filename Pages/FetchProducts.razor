@page "/products";
@using System.Globalization; 
@using WASM_Platzi.Models;
@inject IProductService ProductService;
@inject NavigationManager navigationManager;

<h1>Productos:</h1>
<div class="row">
    <div class="col-12 d-flex justify-content-end">
        <button class="btn btn-primary" @onclick="@(() => navigationManager.NavigateTo("/addproduct"))">+ Crear Nuevo</button>
    </div>
</div>
@if (products?.Count > 0)
{
    <div class="products-container">
        @foreach (Product product in products)
        {
            <div class="card">
                <img class="card-img-top" src="@product.Images[0]" alt="Product" loading="lazy" width = "270" height="210">
                <div class="card-body">
                    <h5><b>@product.Title</b></h5>
                    <p>@product.Price.ToString("C", provider)</p>
                </div> 
            </div>
        }
    </div>
}else 
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
@code {
    CultureInfo provider = new CultureInfo("en-us"); 
    private List<Product> products = new List<Product>{ }; // La lista se inicializa vacía ya que solo se modifica su interior

    protected override async Task OnInitializedAsync()
    {
        await ReloadProds();
    }

    private async Task ReloadProds()
    {
        products.Clear(); // Primero se limpia para que salga el loading state
        var newProds = await GetProducts(); // Luego el código espera a que obtenga los productos
        products.AddRange(newProds); // Y los llena en la lista
    }

    private async Task<List<Product>> GetProducts()
    {        
        return await ProductService.GetProductsAsync();
    }   
}

<style>
    p{
        margin: 0;
    }
    .products-container{
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }

    .card{
        width: 200px;
        margin: 15px
    }
</style>