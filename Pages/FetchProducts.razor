@page "/products";
@using System.Globalization; 
@using WASM_Platzi.Models;
@inject IProductService productService;
@inject NavigationManager navigationManager;
@inject IJSRuntime JSRuntime;
@inject IToastService toastService;

<div class="container">
    <ModuleTitle>Productos:</ModuleTitle>
    <hr>
    <div class="row">
        <div class="col-12 d-flex justify-content-end">
            <button class="btn btn-primary" @onclick="@(() => navigationManager.NavigateTo("/addproduct"))">+ Crear Nuevo</button>
        </div>
    </div>
    @if (products?.Count > 0)
    {
        <div class="products-container">
            @foreach (Product product in products)
            {
                <div class="card-container">   
                    <div class="card">
                        <img class="card-img-top" src="@product.Images[0]" alt="Product" loading="lazy" width = "270" height="210">
                        <div class="card-body">
                            <h5><b>@product.Title</b></h5>
                            <p>@product.Price.ToString("C", provider)</p>
                            <NavLink href="@($"editproduct/{product.Id}")">
                                <button title="edit" class="btn btn-primary">
                                    <span class="oi oi-pencil"></span>
                                </button>
                            </NavLink>
                            
                            <button title="Delete" class="btn btn-danger btn-delete" @onclick="@(() => DeleteProduct(product))">
                                <span class="oi oi-trash"></span>
                            </button>
                            <p>From: @product.Category.Name</p>
                        </div> 
                    </div>
                </div>
            }
        </div>
    }else 
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
</div>
@code {
    CultureInfo provider = new CultureInfo("en-us"); // Precio en $ y no euros
    private List<Product> products = new List<Product>{ }; // La lista se inicializa vacía ya que solo se modifica su contenido

    protected override async Task OnInitializedAsync()
    {
        await ReloadProds();
    }

    private async Task ReloadProds()
    {
        products.Clear(); // Primero se limpia para que salga el loading state
        var newProds = await GetProducts(); // Luego el código espera a que obtenga los productos
        products.AddRange(newProds); // Y los llena en la lista
    }

    private async Task<List<Product>> GetProducts()
    {        
        return await productService.GetProductsAsync();
    }   

    private async Task DeleteProduct(Product product)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Estás seguro que quieres borrar {product.Title}?" ))
            return;
        
        await productService.Delete(product.Id);
        toastService.ShowSuccess("Producto eliminado correctamente");
        await ReloadProds();
    }
}

<style>
    p{
        margin: 0;
    }
    .products-container{
        display: flex;
        flex-wrap: wrap;
        align-items: baseline;
        justify-content: center;
    }

    .card-container{
        padding: 5px 10px;
        margin: 5px 0;
    }

    .card{
        width: 200px;
    }
</style>