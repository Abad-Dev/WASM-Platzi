@page "/counter/{initialCount?}" // El signo ? hace que no sea obligatorio poner el parámetro
@inject ILogger<Counter> logger; // Así se inyectan dependencias ya establecidas en el Program.cs



<PageTitle>Counter</PageTitle>

<ModuleTitle Color="gray">Counter</ModuleTitle>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    private int currentCount = 0;

    [Parameter]
    public string initialCount { get;set; } // Se inicializa con el data annotation "Parameter", se usa el signo "?" si también se usó en la declaración inicial

    [Parameter]
    [SupplyParameterFromQuery] // Así se obtiene un parámetro de un query string
    public string CounterFromQuery { get;set; }


    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<string>("initialCount", out var value))
        {
            if (value is not null)
            {
                initialCount = value;
            }   
        }

        await base.SetParametersAsync(parameters);
    }

    protected override void OnInitialized()
    {
        currentCount = initialCount != null ? int.Parse(initialCount) : 
                    CounterFromQuery != null ? int.Parse(CounterFromQuery) : 0;
        logger.LogInformation("Se inicializa el componente");
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        logger.LogInformation("Se envían los parámetros");
        base.OnParametersSet();
    }

    protected override void OnAfterRender(bool firstRender) // Todas las funciones se ejecutan en ese orden
    {
        logger.LogInformation("Esto ocurre después de inicializado el componente");
        base.OnAfterRender(firstRender);
    }

    private void IncrementCount()
    {
        currentCount++;
    }
}
